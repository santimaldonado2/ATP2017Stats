output$return_performance <-  renderText({
return_performance()
})
output$first_serve_return_ratio <-  renderText({
first_serve_return_ratio()
})
output$second_serve_return_ratio <-  renderText({
second_serve_return_ratio()
})
output$break_points_converted_ratio <-  renderText({
break_points_converted_ratio()
})
output$return_games_won_ratio <-  renderText({
return_games_won_ratio()
})
output$serve_performance3 <-  renderText({
serve_performance3()
})
under_pressure_performance <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "under_pressure_performance"],2)))
break_points_saved_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "break_points_saved_ratio"],2)))
tiebreaks_won_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "tiebreaks_won_ratio"],2)))
break_points_converted_ratio2 <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "break_points_converted_ratio"],2)))
output$under_pressure_performance <-  renderText({
under_pressure_performance()
})
output$break_points_saved_ratio <-  renderText({
first_serve_return_ratio()
})
output$break_points_converted_ratio2 <-  renderText({
break_points_converted_ratio2()
})
output$tiebreaks_won_ratio <-  renderText({
second_serve_return_ratio()
})
tournaments_played <- reactive({
tournaments_by_player[tournaments_by_player$player_id == input$player_selector,]
tournaments
})
courtIcons <- iconList(
Grass = makeIcon("grass.png", "grass.png", 18, 18),
Clay = makeIcon("https://image.shutterstock.com/image-vector/ground-tennis-court-field-clay-450w-1129188113.jpg", "https://image.shutterstock.com/image-vector/ground-tennis-court-field-clay-450w-1129188113.jpg", 18, 18),
"Hard-Indoor" = makeIcon("hard_indoor.png", "hard_indoor.png", 18, 18),
"Hard-Outdor" = makeIcon("hard_outdoor.png", "hard_outdoor.png", 18, 18)
)
output$mapa <- renderLeaflet({
leaflet(data=tournaments_played()) %>% addTiles() %>%
addMarkers(lng = ~tourney_long, lat =  ~tourney_lat,
icon = ~courtIcons[tourney_surface])
})
}
ui <-  dashboardPage(
skin = 'purple',
dashboardHeader(title = 'ATP 2017 Stats',
titleWidth = 250),
dashboardSidebar(width = 250,
sidebarMenu(
menuItem('Player Stats', tabName = 'player_stats_tab')
)),
dashboardBody(
tabItems(
tabItem(tabName = 'player_stats_tab',
fluidRow(
column(width = 4, selectInput("player_selector",
label = h3("Selecciona un jugador"),
choices = player_select_choices),
tag$img(src="clay.png")
)
),
fluidRow(
column(width = 4,
wellPanel(
fluidRow(
h3("Serve Performance"),
textOutput("serve_performance"),
fluidRow(
column(
width = 4,
h5("% 1st Serve"),
textOutput("first_serve_in_ratio")
),
column(
width = 4,
h5("% 1st Serve Points Won"),
textOutput("first_serve_points_won_ratio")
),
column(
width = 4,
h5("% 2nd Serve Points Won"),
textOutput("second_serve_points_won_ratio")
)
),
fluidRow(
column(
width = 4,
h5("Service Games Won"),
textOutput("serve_games_won_ratio")
),
column(
width = 4,
h5("Avg. Aces/ Matches"),
textOutput("average_aces_match")
),
column(
width = 4,
h5("Avg Double Faults/ Matches"),
textOutput("average_double_faults")
)
)
)
)
),
column(width = 4,
wellPanel(
fluidRow(
h3("Return Performance"),
textOutput("return_performance"),
fluidRow(
column(
width = 6,
h5("% 1st Serve Return Points Won"),
textOutput("first_serve_return_ratio")
),
column(
width = 6,
h5("% 2nd Serve Return Points Won"),
textOutput("second_serve_return_ratio")
)
),
fluidRow(
column(
width = 6,
h5("% Return Games Won"),
textOutput("return_games_won_ratio")
),
column(
width = 6,
h5("% Break Points Converted"),
textOutput("break_points_converted_ratio")
)
)
)
)
),
column(width = 4,
wellPanel(
fluidRow(
h3("Under Pressure Performance"),
textOutput("under_pressure_performance"),
fluidRow(
column(
width = 4,
h5("% Break Points Saved"),
textOutput("break_points_saved_ratio")
),
column(
width = 4,
h5("% Tiebreaks Won"),
textOutput("tiebreaks_won_ratio")
),
column(
width = 4,
h5("% Break Points Converted"),
textOutput("break_points_converted_ratio2")
)
)
)
)
)
),
leafletOutput(outputId = 'mapa')
)
)
)
)
ui <-  dashboardPage(
skin = 'purple',
dashboardHeader(title = 'ATP 2017 Stats',
titleWidth = 250),
dashboardSidebar(width = 250,
sidebarMenu(
menuItem('Player Stats', tabName = 'player_stats_tab')
)),
dashboardBody(
tabItems(
tabItem(tabName = 'player_stats_tab',
fluidRow(
column(width = 4, selectInput("player_selector",
label = h3("Selecciona un jugador"),
choices = player_select_choices)
),
tag$img(src="clay.png")
),
fluidRow(
column(width = 4,
wellPanel(
fluidRow(
h3("Serve Performance"),
textOutput("serve_performance"),
fluidRow(
column(
width = 4,
h5("% 1st Serve"),
textOutput("first_serve_in_ratio")
),
column(
width = 4,
h5("% 1st Serve Points Won"),
textOutput("first_serve_points_won_ratio")
),
column(
width = 4,
h5("% 2nd Serve Points Won"),
textOutput("second_serve_points_won_ratio")
)
),
fluidRow(
column(
width = 4,
h5("Service Games Won"),
textOutput("serve_games_won_ratio")
),
column(
width = 4,
h5("Avg. Aces/ Matches"),
textOutput("average_aces_match")
),
column(
width = 4,
h5("Avg Double Faults/ Matches"),
textOutput("average_double_faults")
)
)
)
)
),
column(width = 4,
wellPanel(
fluidRow(
h3("Return Performance"),
textOutput("return_performance"),
fluidRow(
column(
width = 6,
h5("% 1st Serve Return Points Won"),
textOutput("first_serve_return_ratio")
),
column(
width = 6,
h5("% 2nd Serve Return Points Won"),
textOutput("second_serve_return_ratio")
)
),
fluidRow(
column(
width = 6,
h5("% Return Games Won"),
textOutput("return_games_won_ratio")
),
column(
width = 6,
h5("% Break Points Converted"),
textOutput("break_points_converted_ratio")
)
)
)
)
),
column(width = 4,
wellPanel(
fluidRow(
h3("Under Pressure Performance"),
textOutput("under_pressure_performance"),
fluidRow(
column(
width = 4,
h5("% Break Points Saved"),
textOutput("break_points_saved_ratio")
),
column(
width = 4,
h5("% Tiebreaks Won"),
textOutput("tiebreaks_won_ratio")
),
column(
width = 4,
h5("% Break Points Converted"),
textOutput("break_points_converted_ratio2")
)
)
)
)
)
),
leafletOutput(outputId = 'mapa')
)
)
)
)
ui <-  dashboardPage(
skin = 'purple',
dashboardHeader(title = 'ATP 2017 Stats',
titleWidth = 250),
dashboardSidebar(width = 250,
sidebarMenu(
menuItem('Player Stats', tabName = 'player_stats_tab')
)),
dashboardBody(
tabItems(
tabItem(tabName = 'player_stats_tab',
fluidRow(
column(width = 4, selectInput("player_selector",
label = h3("Selecciona un jugador"),
choices = player_select_choices),
tags$img(src="clay.png")
)
),
fluidRow(
column(width = 4,
wellPanel(
fluidRow(
h3("Serve Performance"),
textOutput("serve_performance"),
fluidRow(
column(
width = 4,
h5("% 1st Serve"),
textOutput("first_serve_in_ratio")
),
column(
width = 4,
h5("% 1st Serve Points Won"),
textOutput("first_serve_points_won_ratio")
),
column(
width = 4,
h5("% 2nd Serve Points Won"),
textOutput("second_serve_points_won_ratio")
)
),
fluidRow(
column(
width = 4,
h5("Service Games Won"),
textOutput("serve_games_won_ratio")
),
column(
width = 4,
h5("Avg. Aces/ Matches"),
textOutput("average_aces_match")
),
column(
width = 4,
h5("Avg Double Faults/ Matches"),
textOutput("average_double_faults")
)
)
)
)
),
column(width = 4,
wellPanel(
fluidRow(
h3("Return Performance"),
textOutput("return_performance"),
fluidRow(
column(
width = 6,
h5("% 1st Serve Return Points Won"),
textOutput("first_serve_return_ratio")
),
column(
width = 6,
h5("% 2nd Serve Return Points Won"),
textOutput("second_serve_return_ratio")
)
),
fluidRow(
column(
width = 6,
h5("% Return Games Won"),
textOutput("return_games_won_ratio")
),
column(
width = 6,
h5("% Break Points Converted"),
textOutput("break_points_converted_ratio")
)
)
)
)
),
column(width = 4,
wellPanel(
fluidRow(
h3("Under Pressure Performance"),
textOutput("under_pressure_performance"),
fluidRow(
column(
width = 4,
h5("% Break Points Saved"),
textOutput("break_points_saved_ratio")
),
column(
width = 4,
h5("% Tiebreaks Won"),
textOutput("tiebreaks_won_ratio")
),
column(
width = 4,
h5("% Break Points Converted"),
textOutput("break_points_converted_ratio2")
)
)
)
)
)
),
leafletOutput(outputId = 'mapa')
)
)
)
)
server <- function(input, output){
serve_performance <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "serve_performance"],2)))
first_serve_in_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "first_serve_in_ratio"],2)))
first_serve_points_won_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "first_serve_points_won_ratio"],2)))
second_serve_points_won_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "second_serve_points_won_ratio"],2)))
serve_games_won_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "serve_games_won_ratio"],2)))
average_aces_match <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "average_aces_match"],2)))
average_double_faults <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "average_double_faults"],2)))
output$serve_performance <-  renderText({
serve_performance()
})
output$first_serve_in_ratio <-  renderText({
first_serve_in_ratio()
})
output$first_serve_points_won_ratio <-  renderText({
first_serve_points_won_ratio()
})
output$second_serve_points_won_ratio <-  renderText({
second_serve_points_won_ratio()
})
output$average_aces_match <-  renderText({
average_aces_match()
})
output$average_double_faults <-  renderText({
average_double_faults()
})
return_performance <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "return_performance"],2)))
first_serve_return_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "first_serve_return_ratio"],2)))
second_serve_return_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "second_serve_return_ratio"],2)))
break_points_converted_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "break_points_converted_ratio"],2)))
return_games_won_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "return_games_won_ratio"],2)))
output$return_performance <-  renderText({
return_performance()
})
output$first_serve_return_ratio <-  renderText({
first_serve_return_ratio()
})
output$second_serve_return_ratio <-  renderText({
second_serve_return_ratio()
})
output$break_points_converted_ratio <-  renderText({
break_points_converted_ratio()
})
output$return_games_won_ratio <-  renderText({
return_games_won_ratio()
})
output$serve_performance3 <-  renderText({
serve_performance3()
})
under_pressure_performance <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "under_pressure_performance"],2)))
break_points_saved_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "break_points_saved_ratio"],2)))
tiebreaks_won_ratio <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "tiebreaks_won_ratio"],2)))
break_points_converted_ratio2 <- reactive(as.character(round(sum_match_stats_long[sum_match_stats_long$player_id == input$player_selector, "break_points_converted_ratio"],2)))
output$under_pressure_performance <-  renderText({
under_pressure_performance()
})
output$break_points_saved_ratio <-  renderText({
first_serve_return_ratio()
})
output$break_points_converted_ratio2 <-  renderText({
break_points_converted_ratio2()
})
output$tiebreaks_won_ratio <-  renderText({
second_serve_return_ratio()
})
tournaments_played <- reactive({
tournaments_by_player[tournaments_by_player$player_id == input$player_selector,]
tournaments
})
courtIcons <- iconList(
Grass = makeIcon("grass.png", "grass.png", 18, 18),
Clay = makeIcon("https://image.shutterstock.com/image-vector/ground-tennis-court-field-clay-450w-1129188113.jpg", "https://image.shutterstock.com/image-vector/ground-tennis-court-field-clay-450w-1129188113.jpg", 18, 18),
"Hard-Indoor" = makeIcon("hard_indoor.png", "hard_indoor.png", 18, 18),
"Hard-Outdor" = makeIcon("hard_outdoor.png", "hard_outdoor.png", 18, 18)
)
output$mapa <- renderLeaflet({
leaflet(data=tournaments_played()) %>% addTiles() %>%
addMarkers(lng = ~tourney_long, lat =  ~tourney_lat,
icon = ~courtIcons[tourney_surface])
})
}
shinyApp(ui = ui, server = server)
setwd("~/Primer Trimestre/Visualizacion/ATP2017Stats")
library(rsconnect)
deployApp('.')
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
rsconnect::deployApp('.')
